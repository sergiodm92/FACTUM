{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///home/sergiodm92/Documents/GitHub/FACTUM/src/app/api/send-email/route.ts"],"sourcesContent":["import nodemailer from \"nodemailer\";\nimport { NextResponse } from \"next/server\";\n\n// Configurar el transportador de Nodemailer\nconst transporter = nodemailer.createTransport({\n  host: process.env.EMAIL_HOST,\n  port: Number(process.env.EMAIL_PORT),\n  secure: false, // true para 465, false para otros puertos como 587\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS,\n  },\n});\n\n// Mapa para rastrear solicitudes por IP\nconst emailTracker = new Map();\n\nconst rateLimit = Number(process.env.EMAIL_RATE_LIMIT) || 2;\n\nexport async function POST(req: Request) {\n  try {\n    const clientIp =\n      req.headers.get(\"x-forwarded-for\") || req.headers.get(\"x-real-ip\") || \"unknown\";\n    const now = Date.now();\n\n    // Verificar o inicializar contador para la IP\n    if (!emailTracker.has(clientIp)) {\n      emailTracker.set(clientIp, { count: 1, timestamp: now });\n    } else {\n      const userData = emailTracker.get(clientIp);\n\n      // Limpiar contador si han pasado más de 1 hora\n      if (now - userData.timestamp > 60 * 60 * 1000) {\n        emailTracker.set(clientIp, { count: 1, timestamp: now });\n      } else if (userData.count >= rateLimit) {\n        return NextResponse.json(\n          { message: \"Límite de correos alcanzado para esta IP. Inténtalo más tarde.\" },\n          { status: 429 }\n        );\n      } else {\n        // Incrementar el contador\n        userData.count += 1;\n        emailTracker.set(clientIp, userData);\n      }\n    }\n\n    const body = await req.json();\n    const { subject, text, html } = body;\n\n    // Validar datos\n    if (!subject || !text) {\n      return NextResponse.json(\n        { message: \"Asunto y texto son obligatorios\" },\n        { status: 400 }\n      );\n    }\n\n    // Configurar el correo\n    const mailOptions = {\n      from: `\"Tu Empresa\" <${process.env.EMAIL_USER}>`, // Remitente\n      to: process.env.TO_EMAIL, // Destinatario\n      subject, // Asunto\n      text, // Texto plano\n      html, // HTML opcional\n    };\n\n    // Enviar el correo\n    const info = await transporter.sendMail(mailOptions);\n\n    console.log(\"Correo enviado: %s\", info.messageId);\n\n    return NextResponse.json(\n      { message: \"Correo enviado exitosamente\", messageId: info.messageId },\n      { status: 200 }\n    );\n  } catch (error: any) {\n    console.error(\"Error enviando el correo:\", error);\n    return NextResponse.json(\n      { message: \"Error enviando el correo\", error: error.message },\n      { status: 500 }\n    );\n  }\n}\n\n// Limpieza periódica del mapa\nsetInterval(() => {\n  const now = Date.now();\n  const expiryTime = 60 * 60 * 1000; // 1 hora\n  emailTracker.forEach((data, ip) => {\n    if (now - data.timestamp > expiryTime) {\n      emailTracker.delete(ip);\n    }\n  });\n}, 10 * 60 * 1000); // Ejecuta cada 10 minutos\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,4CAA4C;AAC5C,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC5B,MAAM,OAAO,QAAQ,GAAG,CAAC,UAAU;IACnC,QAAQ;IACR,MAAM;QACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,UAAU;IAC9B;AACF;AAEA,wCAAwC;AACxC,MAAM,eAAe,IAAI;AAEzB,MAAM,YAAY,OAAO,QAAQ,GAAG,CAAC,gBAAgB,KAAK;AAEnD,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,WACJ,IAAI,OAAO,CAAC,GAAG,CAAC,sBAAsB,IAAI,OAAO,CAAC,GAAG,CAAC,gBAAgB;QACxE,MAAM,MAAM,KAAK,GAAG;QAEpB,8CAA8C;QAC9C,IAAI,CAAC,aAAa,GAAG,CAAC,WAAW;YAC/B,aAAa,GAAG,CAAC,UAAU;gBAAE,OAAO;gBAAG,WAAW;YAAI;QACxD,OAAO;YACL,MAAM,WAAW,aAAa,GAAG,CAAC;YAElC,+CAA+C;YAC/C,IAAI,MAAM,SAAS,SAAS,GAAG,KAAK,KAAK,MAAM;gBAC7C,aAAa,GAAG,CAAC,UAAU;oBAAE,OAAO;oBAAG,WAAW;gBAAI;YACxD,OAAO,IAAI,SAAS,KAAK,IAAI,WAAW;gBACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;oBAAE,SAAS;gBAAiE,GAC5E;oBAAE,QAAQ;gBAAI;YAElB,OAAO;gBACL,0BAA0B;gBAC1B,SAAS,KAAK,IAAI;gBAClB,aAAa,GAAG,CAAC,UAAU;YAC7B;QACF;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;QAEhC,gBAAgB;QAChB,IAAI,CAAC,WAAW,CAAC,MAAM;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAkC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,uBAAuB;QACvB,MAAM,cAAc;YAClB,MAAM,CAAC,cAAc,EAAE,QAAQ,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAChD,IAAI,QAAQ,GAAG,CAAC,QAAQ;YACxB;YACA;YACA;QACF;QAEA,mBAAmB;QACnB,MAAM,OAAO,MAAM,YAAY,QAAQ,CAAC;QAExC,QAAQ,GAAG,CAAC,sBAAsB,KAAK,SAAS;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA+B,WAAW,KAAK,SAAS;QAAC,GACpE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA4B,OAAO,MAAM,OAAO;QAAC,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,8BAA8B;AAC9B,YAAY;IACV,MAAM,MAAM,KAAK,GAAG;IACpB,MAAM,aAAa,KAAK,KAAK,MAAM,SAAS;IAC5C,aAAa,OAAO,CAAC,CAAC,MAAM;QAC1B,IAAI,MAAM,KAAK,SAAS,GAAG,YAAY;YACrC,aAAa,MAAM,CAAC;QACtB;IACF;AACF,GAAG,KAAK,KAAK,OAAO,0BAA0B"}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}